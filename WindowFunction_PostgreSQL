假设现在我们有一个表(Cats):

Cats:
---------------------------------------------------------------------------
|     name        |   breed     |    weight   |    color     |     age     |
---------------------------------------------------------------------------
|    ashes	  |   persian   |     4.5     |    black     |      5      |
---------------------------------------------------------------------------
|    molly	  |   persian   |     4.2     |    black     |      1      |
---------------------------------------------------------------------------
|    felix	  |   british   |     4.9     | tortoiseshell|      2      |
---------------------------------------------------------------------------
|    smudge	  |   british   |     4.9     |    black     |      4      |
---------------------------------------------------------------------------
|    tigger	  |   british   |     3.8     | tortoiseshell|      2      |
---------------------------------------------------------------------------
|    alfie	  |   siamese   |     5.5     |    brown     |      5      |
---------------------------------------------------------------------------
|    oscar	  |   siamese   |     6.1     |    black     |      1      |
---------------------------------------------------------------------------
|    millie	  | maine coon  |     5.4     | tortoiseshell|      5      |
---------------------------------------------------------------------------
|    puss 	  | maine coon  |     5.7     |    brown     |      2      |
---------------------------------------------------------------------------
|    smokey	  | maine coon  |     5.1     | tortoiseshell|      2      |
---------------------------------------------------------------------------
|    charlie      |   british   |     4.8     |    black     |      4      |
---------------------------------------------------------------------------

在PgAdmin4中创建上面的表：
DROP TABLE IF EXISTS Cats;
CREATE TABLE Cats
  (name varchar(20), breed varchar(20), weight float, color varchar(20), age int);
INSERT INTO Cats
VALUES
  ('ashes', 'persian', 4.5, 'black', 5),
  ('molly', 'persian', 4.2, 'black', 1),
  ('felix', 'british', 4.9, 'tortoiseshell', 2),
  ('smudge', 'british', 4.9, 'black', 4),
  ('tigger', 'british', 3.8, 'tortoiseshell', 2),
  ('alfie', 'siamese', 5.5, 'brown', 5),
  ('oscar', 'simaese', 6.1, 'black', 1),
  ('millie', 'maine coon', 5.4, 'tortoiseshell', 5),
  ('puss', 'maine coon', 5.7, 'brown', 2),
  ('smokey', 'maine coon', 5.1, 'tortoiseshell', 2),
  ('charlie', 'british', 4.8, 'black', 4);


=====================================================================================================
Basic OVER
OVER 语句 在对aggregate function （如avg，sum，count等）进行限制的时候 非常常用。
假设有这样一个问题：
我们每得到一行数据，就对包括该行数据在内的所有行数据 按照 age列 取平均。并将最终的结果按照 name 列的字母序输出？

说明：例如，按照字母序，我们先要加入 'alfie' 这行，然后对 age列 取平均： 5÷1=5 （age ÷ 当前的行数）
然后加入 'ashes' 这行，然后对 age列 取平均： (5 + 5) ÷ 2 = 5 （alfie的 age + ashes的 age） ÷ 当前的行数
......
直到输出最后 的 'tigger'行（字母序最后一行）为止。

SELECT name, age, AVG(age) OVER (ORDER BY name)
FROM Cats;


=====================================================================================================
PARTITION BY
PARTITION BY可以让我们对 OVER 函数进行 进一步的分割和筛选


假设我们有如下一个表（Runners）：

Runners:
------------------------------------------
|    name   |   weight   |    country    |
------------------------------------------
|    andy   |     50     |      UK       |
------------------------------------------
|    bob    |     100    |      UK       |
------------------------------------------
|   cedric  |     50     |    France     |
------------------------------------------
|    dave   |     70     |    Germany    |
------------------------------------------
|    eric   |     50     |    France     |
------------------------------------------

创建表：
DROP TABLE IF EXISTS Runners;
CREATE TABLE Runners
  (name varchar(20), weight int, country varchar(20));
INSERT INTO Runners
VALUES 
  ('andy', 50, 'UK'),
  ('bob', 100, 'UK'),
  ('cedric', 50, 'France'),
  ('dave', 70, 'Germany'),
  ('eric', 70, 'France');

问题：如何 根据 country列，对 weight列 按行 求平均？
说明：
在上面的Runners 表中，我们首先得到 'andy'行，andy的 'country'是'UK'，我们对 包含'andy'行 在内的 所有已有的'UK'行 进行平均，得到 AVG(weight) 为： 50 ÷ 1 = 50 
然后 'bob' 行也属于'UK'，再次对 'UK' 的 'weight' 列取平均： (50 + 100) ÷ 2 = 75
接着，'cedric' 行属于 'France' 所以 我们只对包含'cedric'行在内的所有 'France'行 取平均，得到 AVG(weight)为：
50 ÷ 1 = 50
......
最终的结果为（可能最后一列的小数位数会有不同）：
-------------------------------------------------------------
|    name   |   weight   |    country    |    avg(weight)   |
-------------------------------------------------------------
|    andy   |     50     |      UK       |        50.0      |
-------------------------------------------------------------
|    bob    |     100    |      UK       |        75.0      |
-------------------------------------------------------------
|   cedric  |     50     |    France     |        50.0      |
-------------------------------------------------------------
|    dave   |     70     |    Germany    |        70.0      |
-------------------------------------------------------------
|    eric   |     50     |    France     |        60.0      |
-------------------------------------------------------------

这种问题就可以用 PARTITION BY 来解决：
SELECT name, weight, country, AVG(weight) OVER (PARTITION BY country ORDER BY name)
FROM Runners ORDER BY name;


=====================================================================================================
PROCEEDING and FOLLOWING
这两个 功能 在面试中不是很常用。但是个人认为，相比于 OVER 和 PARTITION BY，这两个命令更能体现出 window function 中 'window' 的含义。
我们还是用 Runners 表作为案例：

Runners:
------------------------------------------
|    name   |   weight   |    country    |
------------------------------------------
|    andy   |     50     |      UK       |
------------------------------------------
|    bob    |     100    |      UK       |
------------------------------------------
|   cedric  |     50     |    France     |
------------------------------------------
|    dave   |     70     |    Germany    |
------------------------------------------
|    eric   |     50     |    France     |
------------------------------------------

问题：
假设我们有一个大小为 3行的 窗口（window）自上而下 扫过 Runners 表，每扫过新的一行时，求出当前 3 行（或者 2行）的 'weight'列最大值和最小值。
（当 当前行为 Runners 表的第一行或者最后一行时，窗口（window）中只有 2行。）
说明：
首先，当前行 为 'andy'行，则要找到 'andy'的 前一行，当前行（不存在）和后一行 的 最大、最小 weight。即： andy, max(50, 100), max(50, 100) --> andy, 100, 50
然后当前行变为 'bob'行，则要找到 'bob'的 前一行，当前行和后一行 的 最大、最小 weight。即： bob, max(50, 100, 50), min(50, 100, 50) --> bob, 100, 50
......
直到最后一行： eric, max(70, 50), min(70, 50) --> eric, 70, 50


Expected Output：
---------------------------------------------------------
|    name   |   weight   |  max(weight)  |  min(weight) |
---------------------------------------------------------
|    andy   |     50     |      100      |      50      |
---------------------------------------------------------
|    bob    |     100    |      100      |      50      |
---------------------------------------------------------
|   cedric  |     50     |      100      |      50      |
---------------------------------------------------------
|    dave   |     70     |      70       |      50      |
---------------------------------------------------------
|    eric   |     50     |      70       |      70      |
---------------------------------------------------------


-- 答案：
SELECT name, weight, 
       MAX(weight) OVER (ORDER BY name ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING),
       MIN(weight) OVER (ORDER BY name ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)
FROM Runners;



